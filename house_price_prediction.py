# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iBbKuiTo2TR_MnOxcbA1r5tibtybQxsl

Explanation of the Code

Importing Libraries:

Streamlit: Used to create the web interface for the app.

Pandas: Used to manipulate data and read the Excel dataset.
scikit-learn: Relied on for linear regression, data splitting, and preprocessing.

Reading the Dataset:
The Homes for Sale and Real Estate.xlsx file is loaded, containing the data used to train the model.

Preprocessing and Cleaning:
Any rows with missing values are removed to ensure the model works with complete data.
One-hot encoding is applied to the Place column to convert categorical data into numerical values, making it usable by the model.

Creating the Linear Regression Model:
A Pipeline is used to streamline the preprocessing and training steps.
The data is split into 80% for training and 20% for testing to ensure the model generalizes well to unseen data.

The Linear Regression model is trained on the training data to fit the relationship between the input features and the target price.

Prediction Function:
The predict_home_price function takes user inputs (place, number of bedrooms, bathrooms, and square footage).

It uses the trained model to predict the price of the house and returns the result rounded to two decimal places.

Streamlit UI:
A title and description are created to guide the user through the app.
Input fields are provided for user interaction, including:
A select box for the Place.

Number inputs for Bedrooms, Bathrooms, and Square Footage.

When the user clicks the Predict Price button, the predicted price is displayed using st.success().
'''
"""

# Install necessary packages (only needed in Google Colab)
!pip install streamlit pandas scikit-learn openpyxl
!pip install pyngrok

# Import necessary libraries
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from pyngrok import ngrok

# Upload the dataset in Google Colab
from google.colab import files

# Ask the user to upload the Excel file (only in Colab)
uploaded = files.upload()

# Load the dataset from the uploaded file
file_path = list(uploaded.keys())[0]
df = pd.read_excel(file_path, sheet_name='Sheet1')

# Prepare the data for training
features = ['Place', 'Beds', 'Bath', 'Sq.Ft']  # Input features
target = 'Price'  # The price I want to predict

# I clean the dataset by removing rows with missing values
df_cleaned = df.dropna(subset=features + [target])

# I split the data into input (X) and target (y)
X = df_cleaned[features]
y = df_cleaned[target]

# I use one-hot encoding to handle the 'Place' column
preprocessor = ColumnTransformer(
    transformers=[('place', OneHotEncoder(handle_unknown='ignore'), ['Place'])],
    remainder='passthrough'  # Keep other columns unchanged
)

# I create a pipeline to streamline the preprocessing and model training
model = Pipeline(steps=[('preprocessor', preprocessor), ('regressor', LinearRegression())])

# I split the data into 80% training and 20% testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# I train the model using the training data
model.fit(X_train, y_train)

# Define a function to predict the price based on user input
def predict_home_price(place: str, beds: int, bath: float, sq_ft: int) -> float:
    """
    I use this function to predict the price of a home based on user-provided details.
    """
    input_data = pd.DataFrame([[place, beds, bath, sq_ft]], columns=['Place', 'Beds', 'Bath', 'Sq.Ft'])
    predicted_price = model.predict(input_data)[0]  # Get the predicted price
    return round(predicted_price, 2)  # Round it to two decimal places

# Create the Streamlit UI
st.title("House Price Prediction Tool (in the Province of Alberta, Canada)")

# I add a description to guide the user
st.write(
    "This prediction is based on sales records of 3,360 houses in Alberta during 2023. "
    "Enter the details of the house to predict the price:"
)

# Provide an informational note
st.markdown(
    """
    **Note:**
    This model uses linear regression and historical data to provide estimates.
    Predictions are for **educational purposes only** and should not be treated as actual market values.
    """
)

# I create input fields for user-provided house details
place = st.selectbox("Select the town or city", df['Place'].unique())
beds = st.number_input("Number of Bedrooms", min_value=1, max_value=10, value=3)
bath = st.number_input("Number of Bathrooms", min_value=1.0, max_value=10.0, step=0.5, value=2.0)
sq_ft = st.number_input("Area (in square feet)", min_value=100, max_value=10000, value=1500)

# Predict the price when the button is clicked
if st.button("Predict Price"):
    predicted_price = predict_home_price(place, beds, bath, sq_ft)
    st.success(f"The predicted price of the home is: ${predicted_price} CAD")

# Set up a public URL using Ngrok (only in Google Colab)
public_url = ngrok.connect(port='8501')
print(f"Public URL: {public_url}")